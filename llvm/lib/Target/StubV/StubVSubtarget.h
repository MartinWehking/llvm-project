//===-- StubVSubtarget.h - Define Subtarget for the Stub-V ----*- C++ -*--===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the Stub-V specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_STUBV_STUBVSUBTARGET_H
#define LLVM_LIB_TARGET_STUBV_STUBVSUBTARGET_H

#include "StubVFrameLowering.h"
#include "StubVISelLowering.h"
#include "StubVInstrInfo.h"
#include "StubVRegisterInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "StubVGenSubtargetInfo.inc"

namespace llvm {

class StubVSubtarget : public StubVGenSubtargetInfo {
private:
  virtual void anchor();

#define GET_SUBTARGETINFO_MACRO(ATTRIBUTE, DEFAULT, GETTER)                    \
  bool ATTRIBUTE = DEFAULT;
#include "StubVGenSubtargetInfo.inc"

  StubVFrameLowering FrameLowering;
  StubVInstrInfo InstrInfo;
  StubVRegisterInfo RegInfo;
  StubVTargetLowering TLInfo;

  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  StubVSubtarget &initializeSubtargetDependencies(const Triple &TT,
                                                  StringRef CPU,
                                                  StringRef TuneCPU,
                                                  StringRef FS);

public:
  // Initializes the data members to match that of the specified triple.
  StubVSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                 const TargetMachine &TM);

  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const StubVFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  const StubVInstrInfo *getInstrInfo() const override { return &InstrInfo; }

  const StubVRegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }

  const StubVTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }

  bool is64Bit() const { return false; }
  MVT getXLenVT() const { return is64Bit() ? MVT::i64 : MVT::i32; }

#define GET_SUBTARGETINFO_MACRO(ATTRIBUTE, DEFAULT, GETTER) \
  bool GETTER() const { return ATTRIBUTE; }
#include "StubVGenSubtargetInfo.inc"
};
} // namespace llvm

#endif // LLVM_LIB_TARGET_STUBV_STUBVSUBTARGET_H

# NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
# RUN: llc %s -mtriple=stubv32 -start-after=finalize-isel -o - | FileCheck %s
--- |
  ; ModuleID = 'add.ll'
  source_filename = "add.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "stubv32"

  define i32 @add(i32 %a, i32 %b) {
  ; CHECK-LABEL: add:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    add a0, a0, a1
  ; CHECK-NEXT:    ret
    %c = add i32 %a, %b
    ret i32 %c
  }

...
---
name:            add
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr, preferred-register: '' }
  - { id: 1, class: gpr, preferred-register: '' }
  - { id: 2, class: gpr, preferred-register: '' }
liveins:
  - { reg: '$x10', virtual-reg: '%0' }
  - { reg: '$x11', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $x1, $x10, $x11

    %1:gpr = COPY $x11
    %0:gpr = COPY $x10
    %2:gpr = ADD %0, %1
    $x10 = COPY %2
    $x0 = JALR $x1, 0, implicit $x10

...
